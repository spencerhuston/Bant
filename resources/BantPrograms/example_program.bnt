type QuadType derives Floppable { int, int, int, int };
sealed record QuadRecord derives Floppable { a: int, b: int, c: int, d: int };

typeclass Floppable[T] {
    flop = T -> T
};

instance QuadType of Floppable {
    fn flop(q: QuadType(a, b, c, d)) -> QuadType = QuadType(a, c, b, d);
};

instance QuadRecord of Floppable {
    fn flop(q: QuadRecord) -> QuadRecord = QuadRecord(q::a, q::c, q::b, q::d);
};

val q = Quad(1, 2, 3, 4);
print(q);
val qFlopped = flop(q);
print(qFlopped)