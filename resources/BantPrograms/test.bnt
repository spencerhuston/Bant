typeclass Eq[T] {
    eq = (T, T) -> bool,
    neq = (T, T) -> bool
};

typeclass Ord[T] extends Eq {
    gt = (T, T) -> bool,
    lt = (T, T) -> bool
};

typeclass Show[T] extends Ord {
    print = (T) -> null
};

type Person { int, string };

instance Person of Show {
    fn test(p1: Person(age1, name1), p2: Person(age2, name2)) -> bool = {
        age1 == age2 && name1 == name2
    };
    fn neq(p1: Person(age1, name1), p2: Person(age2, name2)) -> bool = {
        age1 != age2 || name1 != name2
    };
    fn gt(p1: Person(age1, name1), p2: Person(age2, name2)) -> bool = {
        age1 > age2 && name1 > name2
    };
    fn lt(p1: Person(age1, name1), p2: Person(age2, name2)) -> bool = {
        age1 < age2 || name1 < name2
    };
    fn print(p: Person(age, name)) -> null = null;
};